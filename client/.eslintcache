[{"C:\\Users\\user\\Desktop\\git\\Yapp\\client\\src\\index.js":"1","C:\\Users\\user\\Desktop\\git\\Yapp\\client\\src\\App.js":"2"},{"size":152,"mtime":1612157756128,"results":"3","hashOfConfig":"4"},{"size":5289,"mtime":1612178783125,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"takq4q",{"filePath":"9","messages":"10","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"C:\\Users\\user\\Desktop\\git\\Yapp\\client\\src\\index.js",[],["12","13"],"C:\\Users\\user\\Desktop\\git\\Yapp\\client\\src\\App.js",["14","15"],"\nimport React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport \"./App.css\";\n\nlet socket;\nconst CONNECTION_PORT = \"localhost:3000\";\nvar room_name = \"Room\";\n\n\nconst cd = new Date(); //current date/time\nconst timestamp =  cd.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\n\nfunction App() {\n  \n  //before login\n  const [loggedIn, setLoggedIn] = useState(false); //check whether or not you entered a room or not.\n  const [room, setRoom] = useState(\"\"); // a value of the room we're in\n  const [userName, setUserName] = useState(\"\"); // value of the user name\n\n  \n  //after login\n  const [message, setMessage] = useState(\"\") // our default msg.\n  const [messageList, setMessageList] = useState([]);\n\n  useEffect(() => {//initialize that kind of connection\n    socket = io(CONNECTION_PORT); //initializes the connection\n  }, [CONNECTION_PORT]); //pass connection port so it doesn't loop for inf.\n\n  useEffect(() => {\n    socket.on(\"recieve_message\", (data) => {\n      console.log(data);\n    })\n  })\n\n  const connectToRoom = () => { //whenever we press the Enter ROom button it fires function\n    setLoggedIn(true);\n    socket.emit(\"join_room\", room); //referencing join_room from Backend Index.Js\n    room_name = room.toString();\n  }; //basic syntax of Socket.IO\n\n  var cd = new Date(); //current date/time\n  var local_time =  cd.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\n  \n\n  const sendMessage = async () =>\n  {\n    let messageMD = {\n      room: room,\n      content: {\n        author: userName,\n        message: message,\n        time: local_time\n      }\n    } // message meta data\n\n    socket.emit(\"send_message\", messageMD);\n\n    setMessageList([...messageList, message.content]);\n    setMessage(\"\")    \n  };\n  \n  return (\n    <div className=\"App\">\n      {\n        !loggedIn ? //if false\n        ( \n          <div className=\"logIn\">\n            <div className=\"ui inverted segment\">\n              <div className=\"ui inverted form\">\n                <div className=\"two fields\">\n                  <div className=\"field\">\n                    <label>Name</label>\n                      <div className=\"ui left icon input\">\n                        <input \n                            type=\"text\" \n                            placeholder=\"Name...\" \n                            onChange={(e) => \n                            {\n                              setUserName(e.target.value);\n                            }} \n                        />\n                        <i className=\"user icon\" />\n                      </div>\n                  </div>\n\n                  <div className=\"field\">\n                    <label>Room</label>\n                    <div className=\"ui left icon input\" >\n                      <input \n                        type=\"text\" \n                        placeholder=\"Room...\" \n                        onChange={(e) => \n                        {\n                          setRoom(e.target.value);\n                        }} \n                      />\n                      <i className=\"door closed icon\"/>                    \n                    </div>\n                  </div>\n                </div>\n                <div className=\"inline field\">\n                  <div className=\"ui checkbox\">\n                    <input type=\"checkbox\" tabindex=\"0\" className=\"hidden\"/>\n                    <label>I agree to the terms and conditions</label>\n                  </div>\n                </div>\n                <button className=\"ui submit button\" onClick={connectToRoom} >Enter</button>\n              </div>\n            </div>\n            \n          </div>\n        ) : (\n          <div className=\"chatContainer\">\n              <table className=\"ui inverted table\">\n                <thead>\n                  <tr>\n                    <th colSpan=\"3\">{room_name} joined at <span className=\"ui red text\">{timestamp}</span></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                  <td className=\"center aligned\" colSpan=\"3\">\n                    <div className=\"messages\">\n                      {\n                        messageList.map((key, val) => \n                        {\n                          return(\n                            <p>\n                              {key.author} {key.message} \n                              <p style=\"text-size: 8px;\">{key.time}</p>\n                            </p>\n                          )\n                        })\n\n                      }\n                    </div>\n                  </td>\n                  </tr>\n                  <tr>\n                    <td colSpan=\"2\">\n                    <div className=\"ui input\">\n                        <textarea type=\"text\" \n                        onChange={(e) => \n                        {\n                          setMessage(e.target.value);\n                        }}></textarea>\n                    </div>\n                      </td>\n                    <td className=\"right aligned\"><button className=\"ui inverted green button\" onClick={sendMessage}>send</button></td>\n                  </tr>\n                </tbody>\n              </table>\n          </div>\n            )\n      }\n    </div>\n  );\n}\n\nexport default App;\n\n",{"ruleId":"16","replacedBy":"17"},{"ruleId":"18","replacedBy":"19"},{"ruleId":"20","severity":1,"message":"21","line":28,"column":6,"nodeType":"22","endLine":28,"endColumn":23,"suggestions":"23"},{"ruleId":"24","severity":1,"message":"25","line":131,"column":34,"nodeType":"26","endLine":131,"endColumn":57},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"react-hooks/exhaustive-deps","React Hook useEffect has an unnecessary dependency: 'CONNECTION_PORT'. Either exclude it or remove the dependency array. Outer scope values like 'CONNECTION_PORT' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["29"],"react/style-prop-object","Style prop value must be an object","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"30","fix":"31"},"Update the dependencies array to be: []",{"range":"32","text":"33"},[882,899],"[]"]